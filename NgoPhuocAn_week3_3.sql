--BAI 1: CREATE PROCEDURE--
--1--
CREATE OR REPLACE PROCEDURE DEPT_INFO
(DEPT_ID departments.department_id%TYPE)
IS
    OUT_DEPT DEPARTMENTS%ROWTYPE;
BEGIN
    SELECT * INTO OUT_DEPT FROM DEPARTMENTS WHERE 1=1 and DEPARTMENT_ID = DEPT_ID;
    dbms_output.put_line('DEPARTMENT ID: ' || OUT_DEPT.DEPARTMENT_ID);
    dbms_output.put_line('DEPARTMENT NAME: ' || OUT_DEPT.DEPARTMENT_NAME);
    dbms_output.put_line('MANAGER ID: ' || OUT_DEPT.MANAGER_ID);
    dbms_output.put_line('LOCATION ID: ' || OUT_DEPT.LOCATION_ID);
EXCEPTION
    WHEN NO_DATA_FOUND THEN DBMS_OUTPUT.PUT_LINE('NO DATA FOUND');
END;

BEGIN
    DEPT_INFO(10);
END;

--2--
CREATE OR REPLACE PROCEDURE ADD_JOB(
    J_ID VARCHAR2,
    J_TITLE VARCHAR2)
IS
BEGIN
    INSERT INTO JOBS VALUES(J_ID, J_TITLE, null, null);
EXCEPTION
    when dup_val_on_index then
    rollback;
    DBMS_OUTPUT.PUT_LINE('inserts have been rolled back');  
END;

BEGIN
    ADD_JOB('GMR', 'GAMER');
END;

--3--
CREATE OR REPLACE PROCEDURE UPDATE_COMM(
    EMPL_ID IN employees.employee_id%TYPE)
IS
BEGIN
    UPDATE employees SET COMMISSION_PCT = COMMISSION_PCT * 1.05  WHERE employee_id = EMPL_ID;
    DBMS_OUTPUT.PUT_LINE('UPDATE SUCCESSFULL');
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('NO DATA FOUND');
END;

BEGIN 
    update_comm(1515);
END;

--4--
CREATE OR REPLACE PROCEDURE ADD_EMP(
    EMPL_ID IN employees.EMPLOYEE_ID%TYPE,
    EMPL_FN IN EMPLOYEES.FIRST_NAME%TYPE,
    EMPL_LN IN EMPLOYEES.LAST_NAME%TYPE,
    EMPL_EMAIL IN EMPLOYEES.EMAIL%TYPE,
    EMPL_PHONE IN employees.phone_number%TYPE,
    EMPL_HIRED IN EMPLOYEES.HIRE_DATE%TYPE,
    EMPL_JOB_ID IN EMPLOYEES.JOB_ID%TYPE,
    EMPL_SAL IN employees.salary%TYPE,
    EMPL_COMM IN employees.COMMISSION_PCT%TYPE,
    EMPL_MAN_ID IN EMPLOYEES.manager_id%TYPE,
    EMPL_DPT_ID IN EMPLOYEES.department_id%TYPE)
IS
BEGIN
    INSERT INTO EMPLOYEES VALUES(EMPL_ID, EMPL_FN, EMPL_LN, EMPL_EMAIL, EMPL_PHONE, 
    EMPL_HIRE, EMPL_JOB_ID, EMPL_SAL, EMPL_COMM, EMP_MAN_ID, EMPL_DPT_ID);
    EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
            ROLLBACK;
            DBMS_OUTPUT.PUT_LINE('INSERT HAVE BEEN ROLLED BACK');
END;

BEGIN
    add_emp(999,'test','test','test','test',to_date('17-JUN-03','DD-MON-RR'),'AD_PRES',24000,null,null,90);
END;


--5--
CREATE OR REPLACE PROCEDURE DELETE_EMP(
    EMPL_ID IN employees.employee_id%TYPE)
IS
BEGIN
    DELETE EMPLOYEES WHERE EMPLOYEE_ID = EMPL_ID;
    DBMS_OUTPUT.PUT_LINE('DELETE COMPLETED');
END;

BEGIN 
    delete_emp(48645165465);
END;

--6--
CREATE OR REPLACE PROCEDURE find_emp
    (
        jobb_id VARCHAR
    )
    AS
        MAX_SAL NUMBER(10);
        MIN_SAL NUMBER(10);
    BEGIN
        SELECT MIN_SALARY, MAX_SALARY INTO MIN_SAL, MAX_SAL FROM JOBS WHERE JOB_ID = jobb_id;
        FOR EMP IN (SELECT * FROM EMPLOYEES WHERE (JOB_ID = jobb_id) AND  (SALARY BETWEEN MIN_SAL AND MAX_SAL))
        LOOP
            DBMS_OUTPUT.put_line(EMP.EMPLOYEE_ID || ', '|| EMP.FIRST_NAME || ', '|| EMP.LAST_NAME || ', '|| 
                                EMP.EMAIL || ', '|| EMP.PHONE_NUMBER || ', '|| EMP.HIRE_DATE || ', '|| EMP.SALARY || ', '|| 
                                EMP.COMMISSION_PCT || ', '|| EMP.MANAGER_ID || ', '|| EMP.DEPARTMENT_ID);
        END LOOP;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('NO DATA FOUND');
    END;

BEGIN
    find_emp('ST_CLERK');
END;

--7--

CREATE OR REPLACE PROCEDURE UPDATE_COMM
IS
    YEAR_DIFF DECIMAL(7,2);
BEGIN
    FOR EMP IN (SELECT * FROM employees)
    LOOP
        YEAR_DIFF := (MONTHS_BETWEEN(SYSDATE, EMP.HIRE_DATE)/12);
        IF (YEAR_DIFF > 2) THEN
            UPDATE employees SET salary = SALARY + 200 WHERE employee_id = EMP.EMPLOYEE_ID;
        ELSIF (YEAR_DIFF > 1) THEN
            UPDATE employees SET salary = SALARY + 100 WHERE employee_id = EMP.EMPLOYEE_ID;
        ELSIF (YEAR_DIFF = 1) THEN
            UPDATE employees SET salary = SALARY + 50 WHERE employee_id = EMP.EMPLOYEE_ID;
        END IF;
    END LOOP;
END;

BEGIN
    UPDATE_COMM();
END;

--8--
CREATE OR REPLACE PROCEDURE JOB_HIS(
    EMPL_ID IN employees.employee_id%TYPE,
    OUT_HISTORY OUT JOB_HISTORY%ROWTYPE)
IS
BEGIN
    SELECT * INTO OUT_HISTORY FROM JOB_HISTORY WHERE JOB_HISTORY.EMPLOYEE_ID = EMPL_ID;
EXCEPTION
        WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('NO DATA FOUND');
END;

DECLARE
    OUT_HISTORY JOB_HISTORY%ROWTYPE;
BEGIN
    JOB_HIS(102, OUT_HISTORY);
    DBMS_OUTPUT.put_line('EMPLOYEE ID = ' || OUT_HISTORY.EMPLOYEE_ID);
    DBMS_OUTPUT.put_line('START_DATE = ' || OUT_HISTORY.START_DATE);
    DBMS_OUTPUT.put_line('END_DATE = ' || OUT_HISTORY.END_DATE);
    DBMS_OUTPUT.put_line('JOB_ID = ' || OUT_HISTORY.JOB_ID);
    DBMS_OUTPUT.put_line('DEPARTMENT_ID = ' || OUT_HISTORY.DEPARTMENT_ID);   
END;


--BAI 2: CREATE FUNCTION--
--1--
CREATE OR REPLACE FUNCTION SUM_SALARY(
    DEPT_ID IN DEPARTMENTS.DEPARTMENT_ID%TYPE)
RETURN NUMBER
IS SUM_SALARY NUMBER :=0;
BEGIN
    SELECT SUM(SALARY) 
    INTO SUM_SALARY 
    FROM EMPLOYEES 
    WHERE DEPARTMENT_ID = DEPT_ID;
RETURN SUM_SALARY;
END;

SELECT sum_salary(90) from DUAL;

--2--
CREATE OR REPLACE FUNCTION NAME_CON(
    COUNT_ID IN COUNTRIES.COUNTRY_ID%TYPE)
RETURN COUNTRIES.COUNTRY_NAME%TYPE
IS COUNT_NAME COUNTRIES.COUNTRY_NAME%TYPE;
BEGIN
    SELECT COUNTRY_NAME INTO COUNT_NAME FROM COUNTRIES WHERE COUNTRY_ID = COUNT_ID;
RETURN COUNT_NAME;
END;

DECLARE
COUNT_ID countries.country_id%TYPE;
COUNT_NAME COUNTRIES.COUNTRY_NAME%TYPE;
BEGIN
    COUNT_NAME := NAME_CON('AR');
    DBMS_OUTPUT.PUT_LINE('COUNTRY NAME: ' || COUNT_NAME);
END;

--3--
CREATE OR REPLACE FUNCTION ANNUAL_COMP(
    EMPL_SALARY IN NUMBER,
    EMPL_COMM   IN NUMBER)
RETURN NUMBER
IS YEAR_SAL NUMBER;
BEGIN
    YEAR_SAL := EMPL_SALARY * 12 + (EMPL_COMM * EMPL_SALARY * 12);
RETURN YEAR_SAL;
END;

DECLARE
YEAR_SAL NUMBER;
BEGIN
    YEAR_SAL := ANNUAL_COMP(10000, 2);
    DBMS_OUTPUT.PUT_LINE('YEAR SALARY: ' || YEAR_SAL);
END;

--4--
CREATE OR REPLACE FUNCTION AVG_SALARY (
    DEPT_ID IN departments.department_id%TYPE)
RETURN NUMBER
IS AVG_SAL NUMBER;
BEGIN
    SELECT AVG(SALARY) INTO AVG_SAL FROM EMPLOYEES WHERE DEPARTMENT_ID = DEPT_ID;
RETURN AVG_SAL;
END;

SELECT AVG_SALARY(90) from DUAL;

--5--
CREATE OR REPLACE FUNCTION TIME_WORK (
    EMPL_ID IN employees.employee_id%TYPE)
RETURN NUMBER
IS WORKED_MONTH NUMBER;
BEGIN
    SELECT (MONTHS_BETWEEN(SYSDATE, HIRE_DATE)) 
    INTO WORKED_MONTH
    FROM EMPLOYEES
    WHERE EMPLOYEE_ID = EMPL_ID;
RETURN WORKED_MONTH;
END;

SELECT TIME_WORK(500) FROM DUAL;

--BAI 3: CREATE TRIGGER--
--1--
CREATE OR REPLACE TRIGGER TABLE_EMPLOYEES_BEFORE_UPDATE_OR_INSERT
BEFORE INSERT OR UPDATE
ON EMPLOYEES FOR EACH ROW
BEGIN
    IF (:NEW.HIRE_DATE > SYSDATE) THEN
        RAISE_APPLICATION_ERROR(-2001, 'THONG TIN NGAY THUE PHAI NHO HON HOAC BANG NGAY HIEN TAI');
    ELSE DBMS_OUTPUT.PUT_LINE('SUCCESSFULL');
    END IF;
END;

--2--
CREATE OR REPLACE TRIGGER MIN_SALARY_ALWAYS_LOWER_MAX_SALARY
BEFORE INSERT OR UPDATE
ON JOBS FOR EACH ROW
BEGIN
    IF(:NEW.MIN_SALARY > :NEW.MAX_SALARY) OR (:NEW.MIN_SALARY > :OLD.MAX_SALARY) OR (:OLD.MIN_SALARY > :NEW.MAX_SALARY)
    THEN
        RAISE_APPLICATION_ERROR(-2001, 'MIN_SALARY PHAI NHO HON MAX_SALARY');
    ELSE DBMS_OUTPUT.PUT_LINE('SUCCESSFULL');
    END IF;
END;

--3--
CREATE OR REPLACE TRIGGER START_DATE_ALWAYS_LOWER_END_DATE
BEFORE INSERT OR UPDATE
ON JOB_HISTORY FOR EACH ROW
BEGIN
    IF (:new.START_DATE >= :new.END_DATE) OR(:new.START_DATE >= :old.END_DATE) OR (:old.START_DATE >= :new.END_DATE)
    THEN
        RAISE_APPLICATION_ERROR(-2001, 'NGAY BAT DAU THUE PHAI TRUOC NGAY KET THUC THUE');
    ELSE DBMS_OUTPUT.PUT_LINE('SUCCESSFULL');
    END IF;
END;

--4--
CREATE OR REPLACE TRIGGER EMPLOYEE_COMM
BEFORE INSERT OR UPDATE
ON EMPLOYEES FOR EACH ROW
BEGIN
    IF (:new.SALARY < :OLD.SALARY) OR (:new.COMMISSION_PCT < :old.COMMISSION_PCT)
    THEN
        RAISE_APPLICATION_ERROR(-2001, 'LUONG VA HOA HONG CUA NHAN VIEN PHAI TANG');
    ELSE DBMS_OUTPUT.PUT_LINE('SUCCESSFULL');
    END IF;
END;